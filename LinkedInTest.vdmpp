class LinkedInTest
types
public String = seq of char;
values     
instance variables
               public l : LinkedIn := new LinkedIn();
operations
                assertTrue: bool ==> ()
                assertTrue(cond) == return
                pre cond;
               
-- Register users
public registerUserTest: () ==> ()
registerUserTest() ==
(
	dcl p1:Person , p2:Person, p3:Person;
  assertTrue(card l.getUsers() = 0);    
   
	p1 := l.registerUser("Luis",<Masculine>,22,"luis22");
	assertTrue(card l.getUsers() = 1);
	assertTrue(forall s in set l.getUsers() & s.getName() = "Luis"); -- Only ppl named luis exist yet
	assertTrue(exists1 s in set l.getUsers() & s.getName() = "Luis"); -- Only ppl named luis exist yet
	
	p2 := l.registerUser("Luis",<Masculine>,23,"luis23");
	assertTrue(card l.getUsers() = 2);
	assertTrue(forall s in set l.getUsers() & s.getName() = "Luis"); -- Only ppl named luis exist yet
	
	p3 := l.registerUser("Carla",<Feminine>,30,"carla30");
	assertTrue(card l.getUsers() = 3);
	assertTrue(exists1 s in set l.getUsers() & s.getName() = "Carla"); -- Now we have 2 Luis and one Carla
	
	-- NO NEED TO TEST IF PERSON CONSTRUCTORS SET PARAMETERS CORRECTLY - this is already done on the tests of the PersonTest class, specifically personConstructorTest
)
pre l.getUsers() = {} and card l.getUsers() = 0
post l.getUsers() <> {} and card l.getUsers() = 3;
                
               
-- Search Person By Name
public searchPersonByNameTest: () ==> ()
searchPersonByNameTest() == (
               
	dcl p1:Person, p2:Person;
	dcl pplSearched:set of Person;
               
	assertTrue(0=card l.getUsers()); 
	p1 := l.registerUser("Luis",<Masculine>,22,"luis22");
	p2 := l.registerUser("Luis",<Masculine>,23,"luis23");
               
	-- Search for Luis -> Will find 2 people, both really named "Luis"
	pplSearched := l.searchPersonByName("Luis");
	assertTrue(card pplSearched=2);
	for all p in set pplSearched do
	   assertTrue(p.getName()="Luis");
               
	-- Search for Joao -> Will find no one with that name
	pplSearched := l.searchPersonByName("Joao");
	assertTrue(card pplSearched = 0);
               
	return
);
              
-- Add and remove connections
public createDestroyConnectionTest: () ==> ()
createDestroyConnectionTest() == (

	dcl p:Person;
	dcl p1:Person;
	dcl p2: Person;
	p:=l.registerUser("Luis",<Masculine>,22,"luis22");
	p1:=l.registerUser("Filipe",<Masculine>,22,"filipe22");
	p2:=l.registerUser("Maria",<Feminine>, 24, "maria24");
	
	l.createConnection(p,p1);
	l.createConnection(p1,p2);
	
	assertTrue(card p.getConnections() = 1 and card p1.getConnections() = 2 and card p2.getConnections() = 1);
	-- Luis has 1 connection with username filipe22
	assertTrue(exists s in set p.getConnections() & s.getUsername()="filipe22");
	
	-- Filipe has 2 connections with usernames "luis22" and "maria24"
	assertTrue(exists1 s in set p1.getConnections() & s.getUsername()="luis22");
	assertTrue(exists1 s in set p1.getConnections() & s.getUsername()="maria24");
	
	--Maria has 1 connection with username "filipe22"
	assertTrue(exists1 s in set p2.getConnections() & s.getUsername()="filipe22");
	
	-- P and P1 stop being connected
	l.destroyConnection(p,p1);
	assertTrue(card p.getConnections() = 0 and card p1.getConnections() = 1 and card p2.getConnections() = 1);
	-- Filipe now only has 1 connection, to "maria24" and she only has 1 connection, to "filipe22"
	assertTrue(exists1 s in set p1.getConnections() & s.getUsername()="maria24");
	assertTrue(exists1 s in set p2.getConnections() & s.getUsername()="filipe22");
	
	l.destroyConnection(p1,p2);
	assertTrue(card p.getConnections() = 0 and card p1.getConnections() = 0 and card p2.getConnections() = 0);
	
	return
);
                
              
-- Common Contacts
public commonContactsTest: () ==> ()
commonContactsTest() ==
(
	dcl p:Person;
	dcl p1:Person;
	dcl p2:Person;
	dcl p3:Person;
                  
	assertTrue(0=card l.getUsers()); 
	p:=l.registerUser("Luis",<Masculine>,22,"luis22");
	p1:=l.registerUser("Filipe",<Masculine>,22,"filipe22");
	p2:=l.registerUser("Pedro",<Masculine>,22,"pedro22");
	p3:=l.registerUser("Joana",<Feminine>,22,"joana22");
	
	l.createConnection(p1,p2);
	l.createConnection(p,p2);
	l.createConnection(p2,p3);
	
	-- p1 and p1 have p2 as common
	assertTrue(l.commonContacts(p1,p) = {p2});
	-- p2 and p3 have no common
	assertTrue(l.commonContacts(p2,p3) = {});
);
              
-- User with the most contacts
public mostContactsTest: () ==> ()
mostContactsTest() == (

	dcl p:Person;
  dcl p1:Person;
	dcl p2:Person;
  dcl p3:Person;    
      
	assertTrue(0=card l.getUsers()); -- this is already tested on registerUserTest
	p:=l.registerUser("Luis",<Masculine>,22,"luis22");
	p1:=l.registerUser("Filipe",<Masculine>,22,"filipe22");
	p2:=l.registerUser("Pedro",<Masculine>,22,"pedro22");
	p3:=l.registerUser("Maria",<Feminine>, 24,"maria24");
	     
	-- As long as there are users, there's always someone with the most, even if that most is 0.
	-- Before any connections, they all have 0, so they all have the most connections. 
	assertTrue({p,p1,p2,p3} = l.mostContacts());
	
	--  p<->p1<->p2      Therefore p1 has 1 connections, p1 has 2 and p2 has 1. p1 has the most connections!
	l.createConnection(p,p1);
	l.createConnection(p1,p2);       
	assertTrue(l.mostContacts() = {p1});
	
	--  p<->p1<->p2<->p3      Therefore p has 1 connections, p1 has 2, p2 has 2 and p3 has 1. p1 and p2 are tied for the most connections!
	l.createConnection(p2, p3);
	assertTrue(l.mostContacts() = {p1,p2});
	
	--  <-/   /->   Means a broken link
	--  p<-/  /->p1<->p2<->p3      Therefore p has 0 connections, p1 has 1, p2 has 2 and p3 has 1. p2 has the most connections!
	l.destroyConnection(p,p1);
	assertTrue(l.mostContacts() = {p2});
	
		--  ...p<->p1<->p2<->p3<->p... it's a full ring cycle. Every person has 2 connections.
	l.createConnection(p, p1);
	l.createConnection(p3, p);
	assertTrue(l.mostContacts() = {p,p1,p2,p3});
);
               
-- Distance Between People
public distanceBetweenPeopleTest: () ==> ()
distanceBetweenPeopleTest() == (
	dcl p:Person;
  dcl p1:Person;
	dcl p2:Person;
	dcl p3:Person;
                  
	assertTrue(card l.getUsers() = 0); 
	p:=l.registerUser("Luis",<Masculine>,22,"luis22");
	p1:=l.registerUser("Filipe",<Masculine>,22,"filipe22");
	p2:=l.registerUser("Pedro",<Masculine>,22,"pedro22");
	p3:=l.registerUser("Jose",<Masculine>,22,"jose22");
	assertTrue(card l.getUsers() = 4);
	
	--  p<->p1<->p2   p3                 
	l.createConnection(p,p1);
	l.createConnection(p1,p2);
	
	-- d(p,p1)=1; d(p1,p2)=1;  d(p,p2)=2;  d(p,p)=0 as it is itself 
	-- d(p, p3)=-1, as there is no path between them, same for p1 to p3 and p2 to p3
	assertTrue(l.distanceBetweenPeople(p,p1) = 1);
	assertTrue(l.distanceBetweenPeople(p,p2) = 2);
	assertTrue(l.distanceBetweenPeople(p,p) = 0);
	assertTrue(l.distanceBetweenPeople(p,p3) = -1);
	assertTrue(l.distanceBetweenPeople(p1,p3) = -1);
	assertTrue(l.distanceBetweenPeople(p2,p3) = -1);
	return
);


-- TODO put 1 more case with a disconnected graph      
-- Average Distance between users in the network
public avgDistTest : () ==> ()
avgDistTest() == (
	dcl p:Person:=  l.registerUser("Pedro",<Masculine>,22,"pedro22");
	dcl p1:Person:= l.registerUser("Luis",<Masculine>,22,"luis22");
	dcl p2:Person:= l.registerUser("Carlos",<Masculine>,22,"carlos22");
	dcl p3:Person:= l.registerUser("Filipe",<Masculine>,22,"filipe22");
  dcl p4:Person; 
  
  assertTrue(0 = l.avgDist());
  
	l.createConnection(p,p1);
	l.createConnection(p3,p1);
	l.createConnection(p2,p3);
	l.createConnection(p2,p);
	
								 /*
								 p - p1 = 1
								 p - p2 = 1
								 p - p3 = 2
								 p1 - p2 = 2
								 p1 - p3 = 1
								 p2 - p3 = 1
								distance:= 1+1+2+2+1+1= 8
								nConnections := 6;
								avgDist := 8/6 
								 */
	assertTrue(8/6 = l.avgDist());
	p4:= l.registerUser("Jose",<Masculine>,22,"jose22");
	--Stays the same since P4 is not connected to any Person in the network thefore it has no connections in the network
	assertTrue(8/6 = l.avgDist());

);
                
public pure getLinkedIn:() ==> LinkedIn
	getLinkedIn() ==
	return l;
                
-- MAIN
public static main: () ==> ()
main() == (
	dcl lt: LinkedInTest :=new LinkedInTest();
	lt.registerUserTest();
	lt.getLinkedIn().cleanUsers();
	lt.searchPersonByNameTest();
	lt.getLinkedIn().cleanUsers();
	lt.mostContactsTest(); 
	lt.getLinkedIn().cleanUsers();     
	lt.commonContactsTest();
	lt.getLinkedIn().cleanUsers();    
	lt.avgDistTest();
	lt.getLinkedIn().cleanUsers();
	lt.createDestroyConnectionTest();
	lt.getLinkedIn().cleanUsers();
	lt.distanceBetweenPeopleTest();
	PersonTest`main();
	
	return      
);
                
functions
traces
end LinkedInTest
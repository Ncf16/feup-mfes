class LinkedIn
types
public String = seq of char;
values

instance variables
private users : set of Person := {};
private avgDistance : int := 1;
private usersMostContacts : set of Person := {};
inv card users >= 0;

 inv avgDistance > 0;
operations

public LinkedIn: () ==> LinkedIn
LinkedIn() == (
return self;
);


-- Register use case
public registerUser: String * Person`Gender * nat1 * String ==> Person
registerUser(n, g, a ,u) == (
dcl p:Person := new Person(n, g, a,u);
	addPerson(p);
	return p;
)
pre is_String(n) and is_Person`Gender(g) and is_nat1(a) and is_String(u) and users <> undefined
post (forall user in set users & (user <> RESULT => (user.getUsername() <> RESULT.getUsername())));--and (users = {} or card users >= 0); -- this last part is users <> nil

-- Auxiliar operation with auxiliar pre and post conds
public addPerson: Person ==> ()
addPerson(p) == users := users union {p}
pre p not in set users
post users = users~ union {p};

-- Search Person use case
public searchPersonByName : String ==>  set of Person
searchPersonByName(name) == 
(
return  {p | p in set users & p.getName() = name};
)
pre is_String(name);  -- exists p in set users & p.getName() = name -----> is this part needed?


-- Add Connection use case
public createConnection: Person*Person ==> ()
createConnection(p1, p2) == (
dcl p: set of Person;
atomic(p:={p1.addConnection(p2)} union {p2.addConnection(p1)})
)
pre p1 in set users and p2 in set users and  p1<>p2
post p2 in set p1.getConnections() and p1 in set p2.getConnections();

-- Destroy Connection use case
public destroyConnection: Person*Person ==> ()
destroyConnection(p1, p2) == (
p1.removePerson(p2);
p2.removePerson(p1);
) 
pre p1 in set users and p2 in set users and p1<>p2 and p2 in set p1.getConnections() and p1 in set p2.getConnections()
post  p2 not in set p1.getConnections() and p1 not in set p2.getConnections();
 
-- Common Contacts use case
public commonContacts : Person*Person ==> set of Person
commonContacts(p,p1) == (
dcl commonContacts: set of Person := {};
for all c in set p.getConnections() do if (c in set p1.getConnections())
 then 	commonContacts := commonContacts union {c};
return commonContacts;)
pre p <> p1 and  exists p2,p3 in set users & (  p2=p  and p3 =p1)
post exists p2,p3 in set users & (  p2 = p  and p3 = p1  and 
(
forall c in set RESULT, c1 in set  p2.getConnections() ,c2 in set  p3.getConnections() &
 c in set p2.getConnections() and c in set p3.getConnections() and (c1<>c2 or c1 = c2 and c1 in set RESULT )));
 

-- Most Contacts use case
public mostContacts:() ==> Person
mostContacts() == return iota p in set users & (not exists p1 in set users & p1.connectionsSize() > p.connectionsSize())
pre users <> {} and exists p in set users &( p.connectionsSize() >0 );

public editCV: Person*String ==> ()
 editCV(p,cv) == (
  p.editCV(cv);
 )
 pre exists p1 in set  users & (p1 = p );


-- Distance Between Two Users use case
public distanceBetweenPeople:Person*Person ==> int 
distanceBetweenPeople(p,p1) ==( 
dcl queue : seq of Person := [];dcl current : Person ;
		for all u in set users do (
		u.setDistance(-1); -- podes mexer wait lemme tell filipe done
		);
	 p.setDistance(0);
	 queue := queue ^ [p] ;
	 while queue <> [] do (
	   current := hd queue;
	   queue := tl queue;
	   for all c in set current.getConnections() do (
	   if(c.getDistance() = -1) then (
	   	c.setDistance( current.getDistance()+1);
	   	queue:= queue ^ [c] ;
	   );
	   if(c = p1) then
	  		 return c.getDistance();
	   );
	 );
	 -- não existe ligação, retorna valor de erro
return -1;)
pre users <> {} and exists p2,p3 in set users & (p=p2 and p1=p3) and p<>p1 ;

-- Average Distance use case
public avgDist: () ==> real
avgDist() == (
	dcl avg: int := 0;
	dcl cnt: int := 0;
	for all u in set users do (
		dcl users2: set of Person := users \ {u};
		for all uu in set users2 do (
			dcl dst: int := distanceBetweenPeople(u, uu);
			if(dst <> -1) then (
				avg := avg + dst;
				cnt := cnt + 1;
			)
		);
	);
	avgDistance := avg/cnt;
	return avgDistance;
);
-- Put pre and pos
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------


-- Auxiliar functions 
public pure getUsers : () ==> set of Person
getUsers() == return users;

public cleanUsers : () ==> ()
cleanUsers() ==( users :={};
return)
post users = {};

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end LinkedIn